<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="IDS_ANC_DESCRIPTION_AGENT1" xml:space="preserve">
    <value>Written by Teemu Suutari (Ancient library).
Converted to C# by Thomas Neumann.

PowerPacker was written by Nico Francois and was very popular on the Amiga. One of its strength, is that it is very fast for both crunching and decrunching.</value>
  </data>
  <data name="IDS_ANC_DESCRIPTION_AGENT10" xml:space="preserve">
    <value>Written by Teemu Suutari (Ancient library).
Converted to C# by Thomas Neumann.

The MASH is a cruncher library for the XPK cruncher created by Zdenek Kabelac. This is from the official package description:

MASH main purpose is to decrunch fast and have an excellent crunch factor. It is using LZ77 compression and a special method to write matches.</value>
  </data>
  <data name="IDS_ANC_DESCRIPTION_AGENT11" xml:space="preserve">
    <value>Written by Teemu Suutari (Ancient library).
Converted to C# by Thomas Neumann.

Crunch-Mania was written by Thomas Schwarz on the Amiga and was well known.</value>
  </data>
  <data name="IDS_ANC_DESCRIPTION_AGENT2" xml:space="preserve">
    <value>Written by Teemu Suutari (Ancient library).
Converted to C# by Thomas Neumann.

The SQSH is a cruncher library for the XPK cruncher created by John Hendrikx. The algorithm is designed to crunch samples by using a delta compression algorithm together with LZ based compression.</value>
  </data>
  <data name="IDS_ANC_DESCRIPTION_AGENT3" xml:space="preserve">
    <value>Written by Teemu Suutari (Ancient library).
Converted to C# by Thomas Neumann.

The MMCMP packer is written by Zirconia a.k.a Emmanuel Giasson. The packer can detect different module formats (S3M/IT/XM/MOD), so it knows where the samples are stored. It then pack thoose with a special designed algorithm.</value>
  </data>
  <data name="IDS_ANC_DESCRIPTION_AGENT4" xml:space="preserve">
    <value>Written by Teemu Suutari (Ancient library).
Converted to C# by Thomas Neumann.

The BZP2 is a cruncher library for the XPK cruncher and created by Oliver Roberts. This is from the official package description:

Julian Sadler's BZip2 compresses files using the Burrows-Wheeler block sorting text compression algorithm, and Huffman coding. Compression is generally considerably better than that achieved by more conventional LZ77/LZ78-based compressors, and approaches the performance of the PPM family of statistical compressors.

BZP2 uses the same compression algorithm as bzip2, and allows you to compress files with the same high crunch factor as BZip2.

In summary, BZP2 offers generally a very high compression ratio, typically around 70-90%.</value>
  </data>
  <data name="IDS_ANC_DESCRIPTION_AGENT5" xml:space="preserve">
    <value>Written by Teemu Suutari (Ancient library).
Converted to C# by Thomas Neumann.

The BLZW is a cruncher library for the XPK cruncher. BLZW stands for "Bryan's turbo-charged LZW" and as the name says, it uses the LZW algorithm to pack the data.</value>
  </data>
  <data name="IDS_ANC_DESCRIPTION_AGENT6" xml:space="preserve">
    <value>Written by Teemu Suutari (Ancient library).
Converted to C# by Thomas Neumann.

The RAKE is a cruncher library for the XPK cruncher created by Karsten Dageförde. This is from the official package description:

RAKE implements a highly optimized form of the popular LZ77 compression algorithm. It uses static huffman coding for the 'len' and a three-step coding for the 'offset' information. The major feature of this packer is the highly optimized algorithm for tracking down redundant data.</value>
  </data>
  <data name="IDS_ANC_DESCRIPTION_AGENT7" xml:space="preserve">
    <value>Written by Teemu Suutari (Ancient library).
Converted to C# by Thomas Neumann.

The SMPL is a cruncher library for the XPK cruncher created by Jorma Oksanen.

SMPL use dynamic huffman with delta precoding, so it better can pack files containing samples, like modules.</value>
  </data>
  <data name="IDS_ANC_DESCRIPTION_AGENT8" xml:space="preserve">
    <value>Written by Teemu Suutari (Ancient library).
Converted to C# by Thomas Neumann.

The SHRI is a cruncher library for the XPK cruncher created by Matthias Meixner. This is from the official package description:

SHRI implements a highly for compression rate optimized compressor, that uses offset/len encoding with adaptive arithmetic aftercoding for best compression results. Its compression rate is better than most other packers, e.g. Lha, Zoo or PowerPacker.</value>
  </data>
  <data name="IDS_ANC_DESCRIPTION_AGENT9" xml:space="preserve">
    <value>Written by Teemu Suutari (Ancient library).
Converted to C# by Thomas Neumann.

The LHLB is a cruncher library for the XPK cruncher created by Gunther Nikl. This is from the official package description:

This XPK compressor uses the general purpose data compression library ZLIB by Jean-loup Gailly and Mark Adler. It implements the compression technique used by GZIP.</value>
  </data>
  <data name="IDS_ANC_ERR_CHECKSUM_MISMATCH" xml:space="preserve">
    <value>Checksum mismatch</value>
  </data>
  <data name="IDS_ANC_ERR_CORRUPT_DATA" xml:space="preserve">
    <value>Crunched data is corrupt</value>
  </data>
  <data name="IDS_ANC_NAME" xml:space="preserve">
    <value>Ancient Decruncher</value>
  </data>
  <data name="IDS_ANC_NAME_AGENT1" xml:space="preserve">
    <value>PowerPacker</value>
  </data>
  <data name="IDS_ANC_NAME_AGENT10" xml:space="preserve">
    <value>XPK (MASH)</value>
  </data>
  <data name="IDS_ANC_NAME_AGENT11" xml:space="preserve">
    <value>Crunch-Mania</value>
  </data>
  <data name="IDS_ANC_NAME_AGENT2" xml:space="preserve">
    <value>XPK (SQSH)</value>
  </data>
  <data name="IDS_ANC_NAME_AGENT3" xml:space="preserve">
    <value>Music Module Compressor (MMCMP)</value>
  </data>
  <data name="IDS_ANC_NAME_AGENT4" xml:space="preserve">
    <value>XPK (BZP2)</value>
  </data>
  <data name="IDS_ANC_NAME_AGENT5" xml:space="preserve">
    <value>XPK (BLZW)</value>
  </data>
  <data name="IDS_ANC_NAME_AGENT6" xml:space="preserve">
    <value>XPK (RAKE)</value>
  </data>
  <data name="IDS_ANC_NAME_AGENT7" xml:space="preserve">
    <value>XPK (SMPL)</value>
  </data>
  <data name="IDS_ANC_NAME_AGENT8" xml:space="preserve">
    <value>XPK (SHRI)</value>
  </data>
  <data name="IDS_ANC_NAME_AGENT9" xml:space="preserve">
    <value>XPK (LHLB)</value>
  </data>
</root>