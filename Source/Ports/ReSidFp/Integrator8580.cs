/******************************************************************************/
/* This source, or parts thereof, may be used in any software as long the     */
/* license of NostalgicPlayer is keep. See the LICENSE file for more          */
/* information.                                                               */
/******************************************************************************/
namespace Polycode.NostalgicPlayer.Ports.ReSidFp
{
	/// <summary>
	/// 
	/// </summary>
	internal class Integrator8580
	{
		// 8580 integrator
		//
		//                   +---C---+
		//                   |       |
		//     vi -----Rfc---o--[A>--o-- vo
		//                   vx
		//
		//     IRfc + ICr = 0
		//     IRfc + C*(vc - vc0)/dt = 0
		//     dt/C*(IRfc) + vc - vc0 = 0
		//     vc = vc0 - n*(IRfc(vi,vx))
		//     vc = vc0 - n*(IRfc(vi,g(vc)))
		//
		// IRfc = K*W/L*(Vgst^2 - Vgdt^2) = n*((Vddt - vx)^2 - (Vddt - vi)^2)
		//
		// Rfc gate voltage is generated by an OP Amp and depends on chip temperature.

		private int vx;
		private int vc;

		private ushort nVgt;
		private ushort n_dac;

		private readonly FilterModelConfig8580 fmc;

		/********************************************************************/
		/// <summary>
		/// Constructor
		/// </summary>
		/********************************************************************/
		public Integrator8580(FilterModelConfig8580 fmc)
		{
			vx = 0;
			vc = 0;
			this.fmc = fmc;

			SetV(1.5);
		}



		/********************************************************************/
		/// <summary>
		/// Set filter cutoff resistor ratio
		/// </summary>
		/********************************************************************/
		public void SetFc(double wl)
		{
			// Normalized current factor, 1 cycle at 1Mhz.
			// Fit in 5 bits
			n_dac = fmc.GetNormalizedCurrentFactor(wl);
		}



		/********************************************************************/
		/// <summary>
		/// Set FC gate voltage multiplier
		/// </summary>
		/********************************************************************/
		public void SetV(double v)
		{
			// Gate voltage is controlled by the switched capacitor voltage divider
			// Ua = Ue * v = 4.76v  1<v<2
			double vg = 4.76 * v;
			double vgt = vg - fmc.GetVth();

			// Vg - Vth, normalized so that translated values can be subtracted:
			// Vgt - x = (Vgt - t) - (x - t)
			nVgt = fmc.GetNormalizedValue(vgt);
		}



		/********************************************************************/
		/// <summary>
		/// 
		/// </summary>
		/********************************************************************/
		public int Solve(int vi)
		{
			// DAC voltages
			uint vgst = (uint)(nVgt - vx);
			uint vgdt = (uint)((vi < nVgt) ? nVgt - vi : 0);	// triode/saturation mode

			uint vgst_2 = vgst * vgst;
			uint vgdt_2 = vgdt * vgdt;

			// DAC current, scaled by (1/m)*2^13*m*2^16*m*2^16*2^-15 = m*2^30
			int n_I_dac = n_dac * ((int)(vgst_2 - vgdt_2) >> 15);

			// Change in capacitor charge
			vc += n_I_dac;

			// vx = g(vc)
			int tmp = (vc >> 15) + (1 << 15);
			vx = fmc.GetOpampRev(tmp);

			// Return vo
			return vx - (vc >> 14);
		}
	}
}
